Link of the Question: https://leetcode.com/problems/maximum-score-after-splitting-a-string/description/

class Solution:
    def maxScore(self, s: str) -> int:
        max_score = 0

        for i in range(len(s) - 1 ):
            left= right=''
            left = s[: i+1]
            right= s[i+1 :]

            left_count = left.count('0')
            right_count = right.count('1')
            max_score = max(max_score,(left_count + right_count))
        
        return max_score

Time And Space complexity: O(n)

Here 

1.  left= right='' -> This line split it into 2 halfs

2.   left = s[: i+1]
     right= s[i+1 :]    -> Now this is more focused on 2 things **left** will start from very **first index** to the ith one(where it is divi and the **right** one with ith to the last
																		 
3. 
            left_count = left.count('0')
            right_count = right.count('1')  -> here this will in the splitted one left will check 0 count and right will check one and in the next line calculate max of it